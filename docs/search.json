[
  {
    "objectID": "pg2.html",
    "href": "pg2.html",
    "title": "",
    "section": "",
    "text": "Sentimental Analysis for Mental Well-Being Using NLP\nIOT based Home security system"
  },
  {
    "objectID": "pg2.html#projects",
    "href": "pg2.html#projects",
    "title": "",
    "section": "",
    "text": "Sentimental Analysis for Mental Well-Being Using NLP\nIOT based Home security system"
  },
  {
    "objectID": "midproject.html",
    "href": "midproject.html",
    "title": "",
    "section": "",
    "text": "YOUTUBE LINK :- https://youtu.be/QjKMxH_dq0w\nGROUP NUMBER :- 14\nGROUP MEMBER NAMES :-\nVenkat Bhuvan Gnumber :- G01478604\nDevarala Chandra Sekhar Gnumber :- G01480418\nbadgraph1 :-\nThe visualization represents the tax revenue of countries and individual percentages of tax from various revenues like individual, social insurance, others, and corporate.\nThe visualization is not clear to understand by looking at it.\nSo we have created graphs to understand them just by looking at the representations.\n\n\nGRAPH1:-\n\ntax_data &lt;- read.csv(\"C:/Users/bhuva/OneDrive/Desktop/STAT-515/taxrevenue.csv\")\n\nstr(tax_data)\n\n'data.frame':   30 obs. of  9 variables:\n $ continent         : chr  \"america\" \"america\" \"america\" \"america\" ...\n $ country           : chr  \"united states\" \"canada\" \"mexico\" \"columbia\" ...\n $ totaltax.billions.: int  5200 581 198 64 58 1600 4500 176 120 417 ...\n $ individual        : num  41.5 36.6 12 14 5 19.1 17.5 5 25 41 ...\n $ social.insurance  : num  24.9 14 0.8 0.6 1 40.2 26.7 20 5 0 ...\n $ property          : num  12.1 11.6 10 13 15 8.1 11.4 20 15 9.5 ...\n $ consumption       : num  17.6 22.9 35 25 35 19.5 25.8 35 40 25.5 ...\n $ other             : num  0 3.7 10 7 5 0.3 2.9 5 10 5 ...\n $ corporate         : num  3.9 11.2 25 35 30 12.9 15.7 15 5 19 ...\n\n\n\nlibrary(ggplot2)\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.3.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(car)\n\nWarning: package 'car' was built under R version 4.3.3\n\n\nLoading required package: carData\n\n\nWarning: package 'carData' was built under R version 4.3.3\n\ntax_data$total &lt;- rowSums(tax_data[, 4:9])\n\n# Calculation of percentages for each column\ntax_data_percent &lt;- as.data.frame(lapply(tax_data[, 4:9], function(x) x / tax_data$total * 100))\n\n# Adding country column\ntax_data_percent$country &lt;- tax_data$country\n\ntax_data_percent_long &lt;- reshape2::melt(tax_data_percent, id.vars = \"country\")\n\ntop_10_countries &lt;- tax_data_percent_long[tax_data_percent_long$country %in% head(unique(tax_data_percent_long$country), 10), ]\n\n\nline_plot &lt;- ggplot(top_10_countries, aes(x = country, y = value/100, color = variable, group = variable)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent_format()) +\n  labs(title = \"Line Graph of Tax Revenue Components (Top 10 Countries)\", x = \"Country\", y = \"Percentage of Tax Revenue\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_color_manual(values = c(\"individual\" = \"#009e73\", \"other\" = \"#0072b2\", \"social.insurance\" = \"#e15759\", \n                                \"property\" = \"#cc79a7\", \"consumption\" = \"#bab0ac\", \"corporate\" = \"#edc948\"))\n\n\nplotly_plot &lt;- ggplotly(line_plot)\n\nplotly_plot\n\n\n\n\n\nThe above line graph represents the top 10 countries and the percentages of tax revenue from various sources.\nGRAPH2:-\n\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(car)\n\ntax_data &lt;- read.csv(\"C:/Users/bhuva/OneDrive/Desktop/STAT-515/taxrevenue.csv\")\n\nstr(tax_data)\n\n'data.frame':   30 obs. of  9 variables:\n $ continent         : chr  \"america\" \"america\" \"america\" \"america\" ...\n $ country           : chr  \"united states\" \"canada\" \"mexico\" \"columbia\" ...\n $ totaltax.billions.: int  5200 581 198 64 58 1600 4500 176 120 417 ...\n $ individual        : num  41.5 36.6 12 14 5 19.1 17.5 5 25 41 ...\n $ social.insurance  : num  24.9 14 0.8 0.6 1 40.2 26.7 20 5 0 ...\n $ property          : num  12.1 11.6 10 13 15 8.1 11.4 20 15 9.5 ...\n $ consumption       : num  17.6 22.9 35 25 35 19.5 25.8 35 40 25.5 ...\n $ other             : num  0 3.7 10 7 5 0.3 2.9 5 10 5 ...\n $ corporate         : num  3.9 11.2 25 35 30 12.9 15.7 15 5 19 ...\n\nnumeric_cols &lt;- c(\"individual\", \"other\", \"social.insurance\", \"property\", \"consumption\", \"corporate\")\ntax_data[numeric_cols] &lt;- lapply(tax_data[numeric_cols], function(x) as.numeric(as.character(x)))\ntax_data[is.na(tax_data)] &lt;- 0  \n\n# Calculation of percentages for each tax component\ntax_data_percent &lt;- data.frame(\n  country = tax_data$country,\n  individual = tax_data$individual / rowSums(tax_data[, 4:9]) * 100,\n  other = tax_data$other / rowSums(tax_data[, 4:9]) * 100,\n  social.insurance = tax_data$social.insurance / rowSums(tax_data[, 4:9]) * 100,\n  property = tax_data$property / rowSums(tax_data[, 4:9]) * 100,\n  consumption = tax_data$consumption / rowSums(tax_data[, 4:9]) * 100,\n  corporate = tax_data$corporate / rowSums(tax_data[, 4:9]) * 100\n)\n\n\ntax_data_percent_long &lt;- reshape2::melt(tax_data_percent, id.vars = \"country\")\n\nplot_ly(tax_data_percent_long, x = ~country, y = ~value, color = ~variable, type = 'bar') %&gt;%\n  layout(title = \"Stacked Bar Plot of Tax Revenue Components\",\n         xaxis = list(title = \"Country\", tickangle = 45,tickmode=\"linear\"),  \n         yaxis = list(title = \"Percentage of Tax Revenue\"),\n         barmode = 'stack') %&gt;%\n  colorbar(title = \"Tax Component\",\n           tickvals = c(\"individual\", \"other\", \"social.insurance\", \"property\", \"consumption\", \"corporate\"),\n           ticktext = c(\"Individual\", \"Other\", \"Social Insurance\", \"Property\", \"Consumption\", \"Corporate\"))\n\nWarning: Didn't find a colorbar to modify.\n\n\n\n\n\n\nThe above stacked bar plot represents all the percentages of tax components of all the countries given in the dataset.\nbadgraph 2 :-\nThe bad graph does not have a proper representation of the data and the y-axis starts from 3000.\nWe have created new designs to represent the data properly.\nHead of the Dataset used:-\n\nbad graph:-\n\nGRAPH1:-\n\n#data2\npeng&lt;- read.csv(\"C:/Users/bhuva/OneDrive/Desktop/STAT-515/penguins.csv\")\nstr(peng)\n\n'data.frame':   344 obs. of  9 variables:\n $ rowid            : int  1 2 3 4 5 6 7 8 9 10 ...\n $ species          : chr  \"Adelie\" \"Adelie\" \"Adelie\" \"Adelie\" ...\n $ island           : chr  \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n $ bill_length_mm   : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int  181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int  3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : chr  \"male\" \"female\" \"female\" NA ...\n $ year             : int  2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\npeng &lt;- peng %&gt;%\n  remove_missing() %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)) %&gt;%\n  ungroup()\n\nWarning: Removed 11 rows containing missing values.\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\nbar_plot &lt;- ggplot(peng, aes(x = species, y = mean_body_mass_g, fill = sex)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Species\", \n       y = \"Mean Body mass (in g)\",\n       title = \"Bar Plot\", \n       subtitle = \"Mean body mass of three penguin species per sex\") +\n  scale_y_continuous(limits = c(0, NA))\n\nprint(bar_plot)\n\n\n\nlibrary(plotly)\n\nplotly_bar_plot &lt;- ggplotly(bar_plot)\n\nplotly_bar_plot\n\n\n\n\n\nThe above plot represents the names of the species on x-axis and mean of the body mass on the y-axis.\nGRAPH2:-\n\n#histogram\npeng&lt;- read.csv(\"C:/Users/bhuva/OneDrive/Desktop/STAT-515/penguins.csv\")\nstr(peng)\n\n'data.frame':   344 obs. of  9 variables:\n $ rowid            : int  1 2 3 4 5 6 7 8 9 10 ...\n $ species          : chr  \"Adelie\" \"Adelie\" \"Adelie\" \"Adelie\" ...\n $ island           : chr  \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n $ bill_length_mm   : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int  181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int  3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : chr  \"male\" \"female\" \"female\" NA ...\n $ year             : int  2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\ngg_histogram &lt;- peng %&gt;%\n  remove_missing() %&gt;%\n  ggplot(aes(x = body_mass_g, fill = sex)) +\n  geom_histogram(binwidth = 100) +\n  facet_wrap(~species) +\n  labs(x = \"Body mass (in g)\", \n       y = \"Frequency\",\n       title = \"Histogram\", \n       subtitle = \"Distribution of body mass of penguins per species and sex\") +\n  scale_y_continuous(limits = c(0, NA)) +\n  scale_x_continuous(limits = c(0, NA))  # Setting limits for x-axis\n\nWarning: Removed 11 rows containing missing values.\n\nplotly_histogram &lt;- ggplotly(gg_histogram)\n\nplotly_histogram\n\n\n\n\n\nThe above graph represents body mass on the x-axis and the frequency of penguins on the y-axis."
  },
  {
    "objectID": "midproject.html#mid-project",
    "href": "midproject.html#mid-project",
    "title": "",
    "section": "",
    "text": "YOUTUBE LINK :- https://youtu.be/QjKMxH_dq0w\nGROUP NUMBER :- 14\nGROUP MEMBER NAMES :-\nVenkat Bhuvan Gnumber :- G01478604\nDevarala Chandra Sekhar Gnumber :- G01480418\nbadgraph1 :-\nThe visualization represents the tax revenue of countries and individual percentages of tax from various revenues like individual, social insurance, others, and corporate.\nThe visualization is not clear to understand by looking at it.\nSo we have created graphs to understand them just by looking at the representations.\n\n\nGRAPH1:-\n\ntax_data &lt;- read.csv(\"C:/Users/bhuva/OneDrive/Desktop/STAT-515/taxrevenue.csv\")\n\nstr(tax_data)\n\n'data.frame':   30 obs. of  9 variables:\n $ continent         : chr  \"america\" \"america\" \"america\" \"america\" ...\n $ country           : chr  \"united states\" \"canada\" \"mexico\" \"columbia\" ...\n $ totaltax.billions.: int  5200 581 198 64 58 1600 4500 176 120 417 ...\n $ individual        : num  41.5 36.6 12 14 5 19.1 17.5 5 25 41 ...\n $ social.insurance  : num  24.9 14 0.8 0.6 1 40.2 26.7 20 5 0 ...\n $ property          : num  12.1 11.6 10 13 15 8.1 11.4 20 15 9.5 ...\n $ consumption       : num  17.6 22.9 35 25 35 19.5 25.8 35 40 25.5 ...\n $ other             : num  0 3.7 10 7 5 0.3 2.9 5 10 5 ...\n $ corporate         : num  3.9 11.2 25 35 30 12.9 15.7 15 5 19 ...\n\n\n\nlibrary(ggplot2)\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.3.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(car)\n\nWarning: package 'car' was built under R version 4.3.3\n\n\nLoading required package: carData\n\n\nWarning: package 'carData' was built under R version 4.3.3\n\ntax_data$total &lt;- rowSums(tax_data[, 4:9])\n\n# Calculation of percentages for each column\ntax_data_percent &lt;- as.data.frame(lapply(tax_data[, 4:9], function(x) x / tax_data$total * 100))\n\n# Adding country column\ntax_data_percent$country &lt;- tax_data$country\n\ntax_data_percent_long &lt;- reshape2::melt(tax_data_percent, id.vars = \"country\")\n\ntop_10_countries &lt;- tax_data_percent_long[tax_data_percent_long$country %in% head(unique(tax_data_percent_long$country), 10), ]\n\n\nline_plot &lt;- ggplot(top_10_countries, aes(x = country, y = value/100, color = variable, group = variable)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent_format()) +\n  labs(title = \"Line Graph of Tax Revenue Components (Top 10 Countries)\", x = \"Country\", y = \"Percentage of Tax Revenue\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_color_manual(values = c(\"individual\" = \"#009e73\", \"other\" = \"#0072b2\", \"social.insurance\" = \"#e15759\", \n                                \"property\" = \"#cc79a7\", \"consumption\" = \"#bab0ac\", \"corporate\" = \"#edc948\"))\n\n\nplotly_plot &lt;- ggplotly(line_plot)\n\nplotly_plot\n\n\n\n\n\nThe above line graph represents the top 10 countries and the percentages of tax revenue from various sources.\nGRAPH2:-\n\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(car)\n\ntax_data &lt;- read.csv(\"C:/Users/bhuva/OneDrive/Desktop/STAT-515/taxrevenue.csv\")\n\nstr(tax_data)\n\n'data.frame':   30 obs. of  9 variables:\n $ continent         : chr  \"america\" \"america\" \"america\" \"america\" ...\n $ country           : chr  \"united states\" \"canada\" \"mexico\" \"columbia\" ...\n $ totaltax.billions.: int  5200 581 198 64 58 1600 4500 176 120 417 ...\n $ individual        : num  41.5 36.6 12 14 5 19.1 17.5 5 25 41 ...\n $ social.insurance  : num  24.9 14 0.8 0.6 1 40.2 26.7 20 5 0 ...\n $ property          : num  12.1 11.6 10 13 15 8.1 11.4 20 15 9.5 ...\n $ consumption       : num  17.6 22.9 35 25 35 19.5 25.8 35 40 25.5 ...\n $ other             : num  0 3.7 10 7 5 0.3 2.9 5 10 5 ...\n $ corporate         : num  3.9 11.2 25 35 30 12.9 15.7 15 5 19 ...\n\nnumeric_cols &lt;- c(\"individual\", \"other\", \"social.insurance\", \"property\", \"consumption\", \"corporate\")\ntax_data[numeric_cols] &lt;- lapply(tax_data[numeric_cols], function(x) as.numeric(as.character(x)))\ntax_data[is.na(tax_data)] &lt;- 0  \n\n# Calculation of percentages for each tax component\ntax_data_percent &lt;- data.frame(\n  country = tax_data$country,\n  individual = tax_data$individual / rowSums(tax_data[, 4:9]) * 100,\n  other = tax_data$other / rowSums(tax_data[, 4:9]) * 100,\n  social.insurance = tax_data$social.insurance / rowSums(tax_data[, 4:9]) * 100,\n  property = tax_data$property / rowSums(tax_data[, 4:9]) * 100,\n  consumption = tax_data$consumption / rowSums(tax_data[, 4:9]) * 100,\n  corporate = tax_data$corporate / rowSums(tax_data[, 4:9]) * 100\n)\n\n\ntax_data_percent_long &lt;- reshape2::melt(tax_data_percent, id.vars = \"country\")\n\nplot_ly(tax_data_percent_long, x = ~country, y = ~value, color = ~variable, type = 'bar') %&gt;%\n  layout(title = \"Stacked Bar Plot of Tax Revenue Components\",\n         xaxis = list(title = \"Country\", tickangle = 45,tickmode=\"linear\"),  \n         yaxis = list(title = \"Percentage of Tax Revenue\"),\n         barmode = 'stack') %&gt;%\n  colorbar(title = \"Tax Component\",\n           tickvals = c(\"individual\", \"other\", \"social.insurance\", \"property\", \"consumption\", \"corporate\"),\n           ticktext = c(\"Individual\", \"Other\", \"Social Insurance\", \"Property\", \"Consumption\", \"Corporate\"))\n\nWarning: Didn't find a colorbar to modify.\n\n\n\n\n\n\nThe above stacked bar plot represents all the percentages of tax components of all the countries given in the dataset.\nbadgraph 2 :-\nThe bad graph does not have a proper representation of the data and the y-axis starts from 3000.\nWe have created new designs to represent the data properly.\nHead of the Dataset used:-\n\nbad graph:-\n\nGRAPH1:-\n\n#data2\npeng&lt;- read.csv(\"C:/Users/bhuva/OneDrive/Desktop/STAT-515/penguins.csv\")\nstr(peng)\n\n'data.frame':   344 obs. of  9 variables:\n $ rowid            : int  1 2 3 4 5 6 7 8 9 10 ...\n $ species          : chr  \"Adelie\" \"Adelie\" \"Adelie\" \"Adelie\" ...\n $ island           : chr  \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n $ bill_length_mm   : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int  181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int  3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : chr  \"male\" \"female\" \"female\" NA ...\n $ year             : int  2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\npeng &lt;- peng %&gt;%\n  remove_missing() %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)) %&gt;%\n  ungroup()\n\nWarning: Removed 11 rows containing missing values.\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\nbar_plot &lt;- ggplot(peng, aes(x = species, y = mean_body_mass_g, fill = sex)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Species\", \n       y = \"Mean Body mass (in g)\",\n       title = \"Bar Plot\", \n       subtitle = \"Mean body mass of three penguin species per sex\") +\n  scale_y_continuous(limits = c(0, NA))\n\nprint(bar_plot)\n\n\n\nlibrary(plotly)\n\nplotly_bar_plot &lt;- ggplotly(bar_plot)\n\nplotly_bar_plot\n\n\n\n\n\nThe above plot represents the names of the species on x-axis and mean of the body mass on the y-axis.\nGRAPH2:-\n\n#histogram\npeng&lt;- read.csv(\"C:/Users/bhuva/OneDrive/Desktop/STAT-515/penguins.csv\")\nstr(peng)\n\n'data.frame':   344 obs. of  9 variables:\n $ rowid            : int  1 2 3 4 5 6 7 8 9 10 ...\n $ species          : chr  \"Adelie\" \"Adelie\" \"Adelie\" \"Adelie\" ...\n $ island           : chr  \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n $ bill_length_mm   : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int  181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int  3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : chr  \"male\" \"female\" \"female\" NA ...\n $ year             : int  2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\ngg_histogram &lt;- peng %&gt;%\n  remove_missing() %&gt;%\n  ggplot(aes(x = body_mass_g, fill = sex)) +\n  geom_histogram(binwidth = 100) +\n  facet_wrap(~species) +\n  labs(x = \"Body mass (in g)\", \n       y = \"Frequency\",\n       title = \"Histogram\", \n       subtitle = \"Distribution of body mass of penguins per species and sex\") +\n  scale_y_continuous(limits = c(0, NA)) +\n  scale_x_continuous(limits = c(0, NA))  # Setting limits for x-axis\n\nWarning: Removed 11 rows containing missing values.\n\nplotly_histogram &lt;- ggplotly(gg_histogram)\n\nplotly_histogram\n\n\n\n\n\nThe above graph represents body mass on the x-axis and the frequency of penguins on the y-axis."
  },
  {
    "objectID": "pg1.html",
    "href": "pg1.html",
    "title": "",
    "section": "",
    "text": "Hello,\nMy name is Bhuvan Venkat, and I’m a graduate student at George Mason University pursuing Data Analytics Engineering. I completed my undergrad degree in electronics and computer engineering. I’ve always been interested in sports statistics and statistical analysis. My long-term goal is to work for a reputed sports team as a data analyst."
  },
  {
    "objectID": "pg1.html#about-me",
    "href": "pg1.html#about-me",
    "title": "",
    "section": "",
    "text": "Hello,\nMy name is Bhuvan Venkat, and I’m a graduate student at George Mason University pursuing Data Analytics Engineering. I completed my undergrad degree in electronics and computer engineering. I’ve always been interested in sports statistics and statistical analysis. My long-term goal is to work for a reputed sports team as a data analyst."
  },
  {
    "objectID": "pg3.html",
    "href": "pg3.html",
    "title": "",
    "section": "",
    "text": "Data Science Course, Internshala Training\nAI-ML intern, Remark Skill Education"
  },
  {
    "objectID": "pg3.html#internships-and-courses",
    "href": "pg3.html#internships-and-courses",
    "title": "",
    "section": "",
    "text": "Data Science Course, Internshala Training\nAI-ML intern, Remark Skill Education"
  }
]